#pragma kernel CSMain
#include "../../Scripts/SPHSimulation/2D/Compute/SPHMath2D.hlsl"

RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float> DensityOutput;

const uint ParticleCount;
const float2 KernelCenter;
const float KernelRadius;

groupshared float sharedInfluenceMemory[256];

[numthreads(256,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID, uint3 group : SV_GroupID, uint3 groupThread : SV_GroupThreadID)
{
    uint idx = id.x;
    
    if (idx < ParticleCount)
    {
        float distance = length(Positions[idx] - KernelCenter);
        sharedInfluenceMemory[groupThread.x] = Poly6Kernel(distance, KernelRadius);
    }
    else
    {
        sharedInfluenceMemory[groupThread.x] = 0.0f;
    }
    
    GroupMemoryBarrierWithGroupSync();
    
    for (uint stride = 256 / 2; stride > 0; stride /= 2)
    {
        if (groupThread.x < stride)
        {
            sharedInfluenceMemory[groupThread.x] += sharedInfluenceMemory[groupThread.x + stride];
        }
        
        GroupMemoryBarrierWithGroupSync();
    }
    
    if (groupThread.x == 0)
    {
        DensityOutput[group.x] = sharedInfluenceMemory[0];
    }
}
