#pragma kernel CSMain

#include "../Compute/SPHMath2D.hlsl"

RWStructuredBuffer<float2> Positions;
float KernelRadius;
float TargetDensity;
int ParticleCount;
float2 Resolution;
float OrthographicSize;
float AspectRatio;
bool RenderGradient;
float4 ZeroPressureColor;
float4 PositivePressureColor;
float4 NegativePressureColor;

RWTexture2D<float4> RenderTexture;

float2 PixelToWorldPosition(uint2 pixelPos)
{
    float2 texcoord = pixelPos / Resolution;
    
    float2 ndc = (texcoord - 0.5) * 2.0;
    
    float x = ndc.x * OrthographicSize * AspectRatio;
    float y = ndc.y * OrthographicSize;
    
    return float2(x, y);
}

float4 DensityToColor(float density)
{
    float diff = density - TargetDensity;
    
    // Create a normalized value for blending (-1 for far below, 1 for far above)
    float normalizedDiff = diff / TargetDensity;
    
    if (density < TargetDensity)
    {
        float t = smoothstep(-1.0, 0.0, normalizedDiff);
        float3 color = lerp(NegativePressureColor.rgb, ZeroPressureColor.rgb, t);
        return float4(color, 1.0);
    }
    else
    {
        float t = smoothstep(0.0, 1.0, normalizedDiff); // t in [0,1] as density exceeds target
        float3 color = lerp(ZeroPressureColor.rgb, PositivePressureColor.rgb, t);
        return float4(color, 1.0);
    }
}

float GetDensity(float2 worldPos)
{
    float density = 0;
    for (int i = 0; i < ParticleCount; i++)
    {
        float distance = length(worldPos - Positions[i]);
        
        if (distance > KernelRadius)
            continue;
        
        density += SpikyKernelPow2(distance, KernelRadius);
    }
    
    return density;
}

float2 GetGradient(float2 worldPos, float density)
{
    float stepSize = 0.001;
    float deltaX = GetDensity(worldPos + float2(stepSize, 0)) - density;
    float deltaY = GetDensity(worldPos + float2(0, stepSize)) - density;
    
    float2 gradient = float2(deltaX, deltaY) / stepSize;
    
    return gradient;
}

[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 worldPosOfPixel = PixelToWorldPosition(id.xy);
    
    float density = GetDensity(worldPosOfPixel);    
    
    float4 color;
    if (RenderGradient)
    {
        float2 gradient = GetGradient(worldPosOfPixel, density);    
        float gradientLength = length(gradient);
        
        color = float4(gradientLength, gradientLength, gradientLength, 1);
    }
    else
    {
        color = DensityToColor(density);
    }
    
    RenderTexture[id.xy] = color;
}
