#pragma kernel Simulate
#pragma kernel CalculateDensity

#include "../Compute/SPHMath2D.hlsl"

RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float2> Velocities;
RWStructuredBuffer<float> Densities;

const uint ParticleCount;
const float KernelRadius;
const float2 BoundaryCenter;
const float2 BoundarySize;
const float2 Gravity;
const float TimeStep;
const float BoundaryDampening;

void ResolveCollision(uint particleID)
{
    float2 pos = Positions[particleID];
    float2 vel = Velocities[particleID];
    
    float2 centeredAbsPos = abs(pos - BoundaryCenter);
    float2 halfSize = 0.5 * BoundarySize;
    float2 edgeDistance = halfSize - centeredAbsPos;
    
    if (edgeDistance.x <= 0)
    {
        pos.x = BoundaryCenter.x + sign(pos.x - BoundaryCenter.x) * halfSize.x;
        vel.x *= -1.0 * BoundaryDampening;
    }
    
    if (edgeDistance.y <= 0)
    {
        pos.y = BoundaryCenter.y + sign(pos.y - BoundaryCenter.y) * halfSize.y;
        vel.y *= -1.0 * BoundaryDampening;
    }   
    
    Positions[particleID] = pos;
    Velocities[particleID] = vel;
}

float2 GetPressureGradient(uint particleID)
{
    
}

[numthreads(64, 1, 1)]
void CalculateDensity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= ParticleCount)
        return;
    
    float density = 0;
    for (uint i = 0; i < ParticleCount; i++)
    {
        // No influence when comparing to the same particle
        if (id.x == i)
            continue;
        
        float distance = length(Positions[i] - Positions[id.x]);
                
        density += Poly6Kernel(distance, KernelRadius);
    }

    Densities[id.x] = density;
}

[numthreads(64, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    float2 pressureGradient;
    
    float2 gradient = GetPressureGradient(id.x);
    
}

[numthreads(64, 1, 1)]
void Simulate(uint3 id : SV_DispatchThreadID)
{
    if (id.x > ParticleCount - 1)
        return;
        
    Velocities[id.x] += Gravity * TimeStep;
    Positions[id.x] += Velocities[id.x] * TimeStep;
    
    ResolveCollision(id.x);
}
