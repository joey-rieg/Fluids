#pragma kernel Simulate
#pragma kernel CalculatePredictedPositions
#pragma kernel CalculateDensity
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity

#include "../Compute/SPHMath2D.hlsl"

RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float2> PredictedPositions;
RWStructuredBuffer<float2> Velocities;
RWStructuredBuffer<float2> Densities;

const uint ParticleCount;
const float KernelRadius;
const float TargetDensity;
const float PressureMultiplier;
const float NearPressureMultiplier;
const float ViscosityMultiplier;
const float2 Gravity;
const float TimeStep;
const float2 BoundaryCenter;
const float2 BoundarySize;
const float BoundaryDampening;

float DensityKernel(float distance)
{
    return SpikyKernelPow2(distance, KernelRadius);
}

float DensityDerivative(float distance)
{
    return SpikyKernelPow2Derivative(distance, KernelRadius);
}

float NearDensityKernel(float distance)
{
    return SpikyKernelPow3(distance, KernelRadius);
}

float NearDensityKernelDerivative(float distance)
{
    return SpikyKernelPow3Derivative(distance, KernelRadius);
}

float ViscosityKernel(float distance)
{
    return Poly6Kernel(distance, KernelRadius);
}

float PressureFromDensity(float density)
{    
    return (density - TargetDensity) * PressureMultiplier;   
}

float NearPressureFromDensity(float nearDensity)
{
    return nearDensity * NearPressureMultiplier;

}

void ResolveCollision(uint particleID)
{
    float2 pos = Positions[particleID];
    float2 vel = Velocities[particleID];
    
    float2 centeredAbsPos = abs(pos - BoundaryCenter);
    float2 halfSize = 0.5 * BoundarySize;
    float2 edgeDistance = halfSize - centeredAbsPos;
    
    if (edgeDistance.x <= 0)
    {
        pos.x = BoundaryCenter.x + sign(pos.x - BoundaryCenter.x) * halfSize.x;
        vel.x *= -1.0 * BoundaryDampening;
    }
    
    if (edgeDistance.y <= 0)
    {
        pos.y = BoundaryCenter.y + sign(pos.y - BoundaryCenter.y) * halfSize.y;
        vel.y *= -1.0 * BoundaryDampening;
    }   
    
    Positions[particleID] = pos;
    Velocities[particleID] = vel;
}

[numthreads(64, 1, 1)]
void CalculatePredictedPositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= ParticleCount)
        return;
    
    Velocities[id.x] += Gravity * TimeStep;
    float lookAheadTimeStep = 1 / 120.0f;
    PredictedPositions[id.x] = Positions[id.x] + Velocities[id.x] * lookAheadTimeStep;
}

[numthreads(64, 1, 1)]
void CalculateDensity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= ParticleCount)
        return;
    
    float2 position = PredictedPositions[id.x];
    float density = 0;
    float nearDensity = 0;
    for (uint i = 0; i < ParticleCount; i++)
    {        
        float distance = length(PredictedPositions[i] - position);
        
        if (distance > KernelRadius)
            continue;
        
        density += DensityKernel(distance);
        nearDensity += NearDensityKernel(distance);
    }

    Densities[id.x][0] = density;
    Densities[id.x][1] = nearDensity;    
}

[numthreads(64, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= ParticleCount)
        return;
    
    float density = Densities[id.x][0];
    float nearDensity = Densities[id.x][1];
    float pressure = PressureFromDensity(density);
    float nearPressure = NearPressureFromDensity(nearDensity);
    float2 pressureForce = 0;
    float2 position = PredictedPositions[id.x];
    
    for (uint i = 0; i < ParticleCount; i++)
    {
        // No influence when comparing to the same particle
        if (id.x == i)
            continue;
        
        float2 direction = PredictedPositions[i] - position;
        float distance = length(direction);
        
        if (distance > KernelRadius)
            continue;
        
        direction = distance > 0 ? direction/distance : float2(0, 1);
        
        float otherDensity = Densities[i][0];
        float otherNearDensity = Densities[i][1];
        float otherPressure = PressureFromDensity(otherDensity);
        float otherNearPressure = NearPressureFromDensity(otherNearDensity);
        
        float sharedPressure = (pressure + otherPressure) * 0.5;
        float sharedNearPressure = (nearPressure + otherNearPressure) * 0.5;
        
        pressureForce += direction * DensityDerivative(distance) * sharedPressure / otherDensity;
        pressureForce += direction * NearDensityKernelDerivative(distance) * sharedNearPressure / otherNearDensity;
    }
    
    // F = m * a => a = F / m
    float2 acceleration = pressureForce / density;
       
    Velocities[id.x] += acceleration * TimeStep;
}

[numthreads(64, 1, 1)]
void CalculateViscosity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= ParticleCount)
        return;
    
    float2 position = PredictedPositions[id.x];
    float2 velocity = Velocities[id.x];
    
    float2 viscosityForce = float2(0, 0);
    for (uint i = 0; i < ParticleCount; i++)
    {
        if (id.x == i)
            continue;
        
        float distance = length(position - PredictedPositions[i]);
        
        if (distance > KernelRadius)
            continue;
        
        float2 otherVelocity = Velocities[i];
        
        viscosityForce += (otherVelocity - velocity) * ViscosityKernel(distance);
    }

    Velocities[id.x] += viscosityForce * ViscosityMultiplier * TimeStep;
}

[numthreads(64, 1, 1)]
void Simulate(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= ParticleCount)
        return;
    
    Positions[id.x] += Velocities[id.x] * TimeStep;
    
    ResolveCollision(id.x);
}
